import { Product } from "@/types/products";
import type { Metadata } from "next";

export async function generateMetadata({
  params,
}: {
  params: Promise<{ customerCategory: string[] }>;
}): Promise<Metadata> {
  const { customerCategory } = await params;

  if (customerCategory.length == 1) {
    const validCustomerCategory = ["men", "women", "kids"];

    if (validCustomerCategory.includes(customerCategory[0])) {
      return {
        title: `${capitalizeFirstLetter(customerCategory[0])} | TCS`,
        description: "Generated by create next app",
      };
    } else {
      const response = await fetch(
        `http://localhost:8080/api/products/${customerCategory[0]}`,
      );
      if (!response.ok) {
        return {
          title: `Not found | TCS`,
          description: "Generated by create next app",
        };
      }
      const product: Product = await response.json();

      return {
        title: `${product.name} | TCS`,
        description: "Generated by create next app",
      };
    }
  } else if (customerCategory.length > 1) {
    return {
      title: `${capitalizeFirstLetter(
        customerCategory[customerCategory.length - 1],
      )} | TCS`,
      description: "Generated by create next app",
    };
  } else {
    return {
      title: `Unknown | TCS`,
      description: "Generated by create next app",
    };
  }

  function capitalizeFirstLetter(word: string): string {
    if (!word) return "";
    return word.charAt(0).toUpperCase() + word.slice(1);
  }
}

export default async function Layout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return children;
}
